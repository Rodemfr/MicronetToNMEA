All the description below is the result of observations of data traffic transiting between Micronet devices.
The interpretation of this traffic is purely speculative and might be completely erroneous.
The NMEA conversion software seems to work well, so many of these interpretation are probably correct, but a number
of strange behaviors let think that there are also a lot a misinterpretations.

As a consequence, if you want to play with your system and understand it better, you are at the right place. But if
you want to have a robust, reliable, waterproof and extensively tested device, you would better go to your nearest
Raymarine/TackTick reseller.

***************************
*** Radio specification ***
***************************

Carrier frequency : 869.840MHz in Europe
                    915.915MHz elsewhere
Modulation : 2-FSK
Deviation : +-38kHz
Sync byte after preamble : 0x99
Bit rate : 76800 baud

All data after the sync word is the Micronet message described below.

***************************************
*** Micronet message general format ***
***************************************

When a Micronet device wants to talk to another device, it sends a "Micronet message" on the radio.
A Micronet message is made of a header which always has the same structure for every message, and a payload which
content depends on the type of message.

|             MESSAGE HEADER              |    PAYLOAD     |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|   
|83 03 77 37|02 03 90 87|02|01|07|5A|18|18|xx xx xx xx ... |

Unless explicitly specified, all values are stored Big Endian in messages (MSB first).

NID = Network ID (4 bytes). This is a unique number which identifies the network the message is addressed to.
      It is equal to the Device ID of the network main device. Each device is associated to a unique network
      and will only consider a message if it is addressed to this network.

DID = Device ID (4 bytes) - Unique number identifying the device sending the message. The MSB of DID (0x02 in the
      above example) describes the device type :
          0x01 Hull Transmitter
          0x02 Wind Transducer
          0x03 NMEA Converter
          0x04 Mast Rotation Sensor
          0x05 MOB
          0x06 SDPOD
          0x83 Analog Wind Display
          0x81 Dual Display
		  0x86 Dual Maxi Display 
		  0x88 Remote Display 

MI = Message ID (1 bytes) - Type of the message. Necessary for the receiver to know how to decode payload.
     0x01 Master Request
     0x02 Send Data
     0x06 Set Parameter
     0x07 Ack Parameter
     0x0a Ping
     0x0b Ack Ping
	 0x0c Enter Remote Mode
	 0x0d Exit Remote Mode
	 0x14 Send RC Command
	 0x18 Send invitation to become master?
	 0x19 Ack to becoming master?
	 0x1b Ack Remote - Report control capabilities?

	 880B2906 860B78C7 1B 19 09 CF 0E 0E  -- 02 02
	 880B2906 860B78BD 1B 19 00 BC 0E 0E  -- 02 02
	 880B2906 860B78C7 1B 19 09 CF 0E 0E  -- 02 02 (i'm not being remote controlled)
	 
	 880B2906 860B78BD 1B 19 00 BC 0E 0E  -- 02 02
	 
DF = Device Flags - Unclear if this byte really plays a role or not. It seems to give information on emitting
     device status/properties. It seems to be defined as a set of bit flags. Interpretation probably wrong.
       0x01 Measurement device
       0x08 Display (or master ?) device
	   0x19 Dual Maxi Display ?

SS = Signal Strength - Indicator of signal strength as seen by slave device. Value ranges from 0 (weakest signal) to
                       9 (strongest signal). It is measured by slave device when receiving 0x01 message from master. 
     0 Weakest signal
     9 Strongest signal

CS = Check sum of all bytes from previous CS or from beginning of message.

LE = (Length - 2) of the complete message in bytes, including payload. Value having its own checksum (i.e. copy) for
     robustness.

****************************
*** Network organization ***
****************************

A Micronet network is made of one master device and several slaves. The master is the device which has been powered
first, so it can be a different device at each power-up if you have several displays. Only the master device is
allowed to initiate RF communication. Master always use message 0x01 (Master request) to initiate radio communications.
Slave devices then answer relatively to the "Master Request" message, in a predetermined manner to avoid RF collisions.

"Master request" is sent by master every second and defines precisely when a slave device can talk on the network.
"Master request" gives the list of every device known by the Master, how and when they can send their messages (See
detailed description of Master Request below).

Each slave device has a "transmission window" made of :
   - Preamble + sync word : 16 bytes set at 0x55 (preamble) followed by 0x99 (sync by). The total duration of this
     part is 1771us
   - Message data : (14 + PL) bytes of message data
   - a 1893ms "guard time" during which nothing should be transmitted. Its role is to give time for slave devices to
     process the message. It also gives "space" on the line to cop-up with non precise transmission starts.
   - Transmission window is rounded to the upper 244us
   
|---------------------------------------------------------------------------|
| preamble | 0x99 |   Micronet message  |    Guard time    | 244us rounding |
|---------------------------------------------------------------------------|
|      1771us     |  (14 + PL) * 104us  |      1893ms      |    0-243us     |

Slave devices must answer in the same order than defined in "Master request" message. PL parameter is also provided
by Master request message for each slave device, allowing calculation of each window. A slave device knows the start
of its transmission window by calculating window sizes of the preceding slave devices. The first window starts just
at the end of "Master Request" message. If a device is listed with a payload of zero, then it has no transmission
window at all (no guard time, preamble or header).

Theses slave transmission windows are called "synchronous windows". Their role is to allow a slave device to
periodically send its measured data to the various displays of the network. For example, this is where a wind
transducer will send wind data every second. The sync window is generally used by message 0x02 (Send Data).

There is however another way for a slave device to talk on a network. If a device is not listed in "Master Request"
device list or if it needs to send something else than its periodical data, it can use the so called "asynchronous
window". This transmission window is a special one, located after the last synchronous window and which can be used
by any device, including devices not yet attached to network.

Typical usages of this window are :
   - For a new device to request an attachment to a network (message 0x03)
   - For an existing slave device to request a window size change (message 0x05)
   - For the Master to verify presence of slave devices in the network (message 0x0a)
   - For a display to transmit a user parameter change to other devices (message 0x06)
   - Etc.
   
The structure of the asynchronous window is :

|----------------------------------------------------------|
| preamble | 0x99 |   Micronet message  |    Guard time    |
|----------------------------------------------------------|
|      1771us     |  (14 + 20) * 104us  |      1893ms      |

Note that asynchronous commands can not exceed a payload of 20 bytes. Asynchronous window starts 7200us after the end of
the last synchronous window. Since asynchronous commands are subject to collisions (any device can potentially talk in
this window), they generally require an acknowledge from the other devices. As an example, a display device could send a
 parameter update message (0x06) which requires all other devices to acknowledge it with message 0x07. In that case
 other devices will use other transmission windows located after the asynchronous slot. These windows are called "Ack
 windows". If other devices do not acknowledge, then it means that a collision likely occurred on asynchronous window
 and that message must be sent again during a later network cycle. If a device do not acknowledge a asynchronous message
 several times, it may be detached from network by master.

These Ack windows have the following structure :

|----------------------------------------------------------|
| preamble | 0x99 |   Micronet message  |    Guard time    |
|----------------------------------------------------------|
|      1771us     |      16 * 104us     |      1893ms      |

They are located just after each others. And devices will response in reverse order compared to "Master Request"
device list.

Knowing all of this, here is an example cycle of a network composed of devices A, B, C, D, E. A being the master.

|--------------|-----------------------------------|--------|------------|--------------------------------------------|
|   Initial    |            Synchronous            |        |Asynchronous|                Acknowledge                 |
|--------------|--------|--------|--------|--------|--------|------------|--------|--------|--------|--------|--------|
| A:0x01(BCDE) | B:0x02 | C:0x02 | D:0x02 | E:0x02 | 7200us |   C:0x06   | E:0x07 | D:0x07 | C:0x07 | B:0x07 | A:0x07 | 
|--------------|--------|--------|--------|--------|--------|------------|--------|--------|--------|--------|--------|

**************************************
*** Message 0x01 (Master Resquest) ***
**************************************
Transmission window : Initial

This message is sent by the master device to initiate a communication cycle on the network. Slave devices use this
message to know how and when they can talk on the radio.

This message lists all slave devices known by the master and provides the "PL" value for each of them. PL is the maximum
number of bytes expected in the payload of the "Send Data" message. This way, we have a complete temporal map of the
data exchange, allowing slaves to know where to transmit their messages, without colliding with other devices.

Here is the format (with an example) :

|             MESSAGE HEADER              |                                 REQUESTED DEVICES                                 |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|    DID1   |PL|    DID2   |PL|    DID3   |PL|    DID4   |PL|    DID5   |PL| ??? |CS|
|83 03 77 37|83 03 77 37|01|09|00|72|28|28|83 03 77 37|1C|02 03 90 87|0C|01 0B C0 22|26|81 03 70 82|0E|83 03 77 37|0E|00 00|52|

DIDn - Devices IDs of devices attached to the network.
       
PL - Maximum payload length of the message expected from the mentioned device. Note that a payload of zero bytes means
     that there is no window at all for this device.

CS - Checksum

********************************
*** Message 0x02 (Send Data) ***
********************************
Transmission window : Synchronous

This message is used to send data from one device to other network devices. It is a response to "Master Request"
message sent by the main display to collect data from all sensors. It sends a variable number of fields depending on
the Device Type and its available sensors. Each field is coded the same way but with variable size and type.

Message examples :

Message from wind transducer
|             MESSAGE HEADER              |      FIELD1     |      FIELD2     |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|FL|FI|FP| AWS |CS|FL|FI|FP| AWA |CS|
|83 03 77 37|02 03 90 87|02|01|09|5C|18|18|04 05 05 00 2C 3A|04 06 05 FF FB 09|	

Message sent by an analog wind display
|             MESSAGE HEADER              |       FIELD1       |       FIELD2       |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|FL|FI|FP| AWS |??|CS|FL|FI|FP| AWA |??|CS|
|83 03 77 37|83 03 77 37|02|09|00|73|1A|1A|05 21 05 00 00 09 34|05 22 05 00 64 09 99|

Message sent by a dual display
|             MESSAGE HEADER              |       FIELD1       |       FIELD2       |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|FL|FI|FP| AWS |??|CS|FL|FI|FP| AWA |??|CS|
|83 03 77 37|81 03 70 82|02|09|00|B5|1A|1A|05|21|05|00 00|09|34|05 22 05 00 33|09|68|

Message sent by a hull transmitter
|             MESSAGE HEADER              |      FIELD1     |      FIELD2     |       FIELD3       |       FIELD4       |     FIELD5      |              FIELD6               |    FIELD7    |      FIELD8     |     FIELD9      |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|FL|FI|FP| DPT |CS|FL|FI|FP| VCC |CS|FL|FI|FP| AWS |??|CS|FL|FI|FP| AWA |??|CS|FL|FI|FP| SPD |CS|FL|FI|FP|   TRIP    |    LOG    |CS|FL|FI|FP|T |CS|FL|FI|FP| AWS |CS|FL|FI|FP| AWA |CS|
|83 03 77 37|01 0B C0 22|02|01|09|2E|49|49|04|04|05|13 89|A9|04|1B|05|00 89|AD|05|21|05|00 00|06|31|05|22|05|FF F5|06|26|04|01|05|00 BB|C5|0A|02|05|00 00 00 95|00 00 00 1C|C2|03|03|05|25|30|04|05|03|00 00|0C|04|06|03|FF F5|01|

Observed Field formats :

|01|02|03|04|05|06|07|08|09|10|11|12|
|03|FI|FP|VA|CS| -> value on a 8bit integer
|04|FI|FP| VAL |CS| -> value on a 16bit integer
|05|FI|FP| VAL |??|CS| -> value on a 16bit integer followed by an unidentified byte
|06|FI|FP| VAL1| VAL2|CS| -> values on two 16bit integers
|0a|FI|FP|    VAL1   |    VAL2   |CS| -> two values both on a 32bit integer

FL = Field Length - (FL + 2) is the total length of the field, including CRC, allowing to skip in case the format/ID
     would be unknown to the decoding device.
       0x03 Total field description is on 5 bytes, including CRC. Value is 8bit.
       0x04 Total field description is on 6 bytes, including CRC. Value is 16bit.
       0x05 Total field description is on 7 bytes, including CRC. Value is 24bit.
       0x0a Total field description is on 12 bytes, including CRC. Value is on 64bit.

FI = Field ID
     0x01 SPD
          |01|02|03|04|05|06|
          |04|01|FP| VAL |CS|
          VAL = Speed * 100 (KT)
     0x02 TRIP + LOG
          |01|02|03|04|05|06|07|08|09|10|11|12|
          |0a|02|FP|    VAL1   |    VAL2   |CS|
          VAL1 = Trip * 100 (NM)
          VAL2 = Log *10 (NM) 
     0x03 T*2(degC)
          |01|02|03|04|05|
          |03|03|FP|VA|CS|
          VA = T * 2 (C)
     0x04 DPT
          |01|02|03|04|05|06|
          |04|04|FP| VAL |CS|
          VAL = Depth * 10 (ft)
          A value of 5001 (500.1ft) means depth is not available for any reason (e.g. too deep)
     0x05 AWS
          |01|02|03|04|05|06|
          |04|05|FP| VAL |CS|
          VAL = ApparentWindSpeed * 10 (kt)
     0x06 AWA(DEG) :
          |01|02|03|04|05|06|
          |04|06|FP| VAL |CS|
          VAL = ApparentWindAngle (deg)
          Values are between -180 and 180
     0x07 HDG(DEG)
          |01|02|03|04|05|06|
          |04|07|FP| VAL |CS|
          VAL = MagHeading (deg)
          Values are between 0 and 360
     0x08 SOG/COG
          |01|02|03|04|05|06|07|08|
          |06|08|FP|VAL1 |VAL2 |CS|
          VAL1 = SOG * 10 (KT)
          VAL2 = COG (Deg)
     0x09 LAT/LON
          |01|02|03|04|05|06|07|08|09|10|11|
          |09|09|FP|LA| LAM |LO| LOM |DI|CS|
          LA = latitude in degrees (integer part)
          LAM = minutes of latitude * 1000
          LO = longitude in degrees (integer part)
          LOM = minutes of longitude * 1000
          DI = Flags : 0x00/0x01 -> South/North
                       0x00/0x02 -> West/East
     0x0A BTW
          |01|02|03|04|05|06|07|08|09|10|11|12|
          |0a|0a|FP| VAL |??|??|??|??|??|??|CS|
          VAL = BTW (Deg)
          Values are between 0 and 360
     0x0B XTE
          |01|02|03|04|05|06|
          |04|0b|FP| VAL |CS|
          VAL = Deviation (NM)
          Positive deviation is right deviation, negative is left
     0x0C TIME
          |01|02|03|04|05|06|
          |04|0c|FP|HH|MM|CS|
          HH = Hours (24h format)
          MM = Minutes
     0x0D Date
          |01|02|03|04|05|06|07|
          |05|0d|FP|DD|MM|YY|CS|
          DD = Day of month
          MM = Month (01 = January)
          YY = Year (from 2000)
     0x10 Device Info
          |01|02|03|04|05|06|07|08|
          |06|10|DT|MI|MA|SB|SS|CS|
          DT = Device type
          MI = Minor version of SW (0 to 9 max)
          MA = Major version of SW
          SB = Charge & Battery Level.
                 High nibble is charge level (0..3)
                 Low nibble is battery level (0..3) 
          SS = Signal Strength (0..9)
     0x12 VMG-WP
          |01|02|03|04|05|06|
          |04|12|FP| VAL |CS|
          VAL = Speed * 100 (KT)
     0x1b VCC
          |01|02|03|04|05|06|
          |04|1b|FP| VAL |CS|
          VAL = Voltage * 10 (V)
     0x1F DTW
          |01|02|03|04|05|06|07|08|
          |06|1f|FP|    VAL    |CS|
          VAL = Distance * 100 (NM)
     0x21 AWS - Seems the be same value than 0x05, but with an unidentified extra byte ? 0x21 is used by non
	            wind-transducer devices to repeat the value.
          |01|02|03|04|05|06|07|
          |04|05|FP| VAL |??|CS|
          VAL = ApparentWindSpeed * 10 (kt)
     0x22 AWA - Seems the be same value than 0x06, but with an unidentified extra byte ? 0x22 is used by non
	            wind-transducer devices to repeat the value.
          |01|02|03|04|05|06|07|
          |04|05|FP| VAL |??|CS|
          VAL = ApparentWindAngle (deg)
          Values are between -180 and 180

FP = Field Property ??
     0x05 Seems to be the value used when the data comes from the measuring sensor
     0x03 Seems to be the value used when the data comes from a repeater (i.e. the main display or hull transmitter)

CS = Field checksum. Sum of all bytes of the field.

******************************************
*** Message 0x03 (Request Sync Window) ***
******************************************
Transmission window : Asynchronous

When a device is not listed in the synchronous data schedule. It can request a sync transmission window to the master
device with this message.

|             MESSAGE HEADER              |  SIZE  |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS| PL  |CS|
|01 0A 8B 60|01|0B 8B 60|03|01|09|FA|0F|0F|00 1A|1A|

PL - Maximum payload length of a message using this slot

CS - Checksum of the entire payload

*****************************************
*** Message 0x05 (Resize Sync Window) ***
*****************************************
Transmission window : Asynchronous

When a device wants to change the size of its maximum payload in its synchronous window, it can use this command. The
payload size will be updated at next cycle. 

|             MESSAGE HEADER              |SIZE |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|NL|CS|
|83 03 77 37|01 0B C0 22|05|01|09|31|0E|0E|3D|3D|

NL - New payload length

CS - Checksum of the entire payload

************************************
*** Message 0x06 (Set Parameter) ***
************************************
Transmission window : Asynchronous

This message is sent by a display when a parameter changed. This is typically used when user changes a configuration
parameter.

Example : Wind direction calibration +10 deg
|             MESSAGE HEADER              |     CORRECTION     |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|PA|PI|PL| VA  |VE|CS|
|83 03 77 37|83 03 77 37|06|09|09|80|13|13|FF|07|02|0A 00|04 16|

Example : Wind Speed Calibration +7%
|             MESSAGE HEADER              |    CORRECTION   |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|PA|PI|PL|VA|VE|CS|
|83 03 77 37|83 03 77 37|06|09|00|77|12|12|FF 06 01 07 0B 18|

Example : Speed filtering level MED
|             MESSAGE HEADER              |    CORRECTION   |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|PA|PI|PL|VA|VE|CS|
|83 03 77 37|81 03 70 82|06|09|09|C2|12|12|FF|04|01|20|0E|32|

Example : Set Display backlight?
|             MESSAGE HEADER              | DISPLAY?  |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|PA|VA|VE|CS|
|88 0B 29 06|88 0B C9 44|06|01|09|72|10|10|E5|00|01|E6|

PL Parameter Length - Number of bytes on wich VA is coded.

VE Version - Incremented by one at each new value sent to other devices. Reset to zero at each power-up of the system.
             This number is used to avoid writing several times the same value into EEPROM. This can happen when a
			 device is not responding in which case the sender might repeat the command up to 5 times. This extends
			 EEPROM life time.

PA Page - This bytes seems to select a page of parameters you want to access. Pretty unsure definition.
            0xFF - Nav & Sensors page
			0xE5 - Backlight level

PI Parameter ID - Id of the parameter to be changed in the page

    PA   PI
   0xFF 0x00 Water speed factor
      VA = 8bit unsigned integer. Value is 0x32 + speed correction in % (e.g. 0x30<=>-2%, 0x37<=>+5%)
   0xFF 0x02 Water temperature offset
      VA = 8bit signed integer. Value is temperature offset * 2, coded in Celsius
   0xFF 0x03 Distance from depth transducer to waterline or keel
      VA = 8bit signed integer of the offset in ft*10. If the value is positive, it is the distance to waterline. If
	  negative, to the keel.
   0xFF 0x04 Speed filtering level
      VA = 0x00 : AUTO
      VA = 0x10 : SLOW
      VA = 0x20 : MED
      VA = 0x30 : FAST
   0xFF 0x05 Wind Speed or Compass heading filtering level
      VA = 0x00 : AUTO (Wind Speed)
      VA = 0x01 : SLOW (Wind Speed)
      VA = 0x02 : MED (Wind Speed)
      VA = 0x03 : FAST (Wind Speed)
      VA = 0x00 : AUTO (Heading)
      VA = 0x10 : SLOW (Heading)
      VA = 0x20 : MED (Heading)
      VA = 0x30 : FAST (Heading)
   0xFF 0x06 Wind speed factor
      VA = Speed correction as signed 8bit integer in percent
   0xFF 0x07 Wind direction offset
      VA = A signed 16-bit integer in degrees /!\ LITTLE ENDIAN VALUE /!\
   0xFF 0x09 Compass heading offset
      VA = A signed 16-bit integer in degrees /!\ LITTLE ENDIAN VALUE /!\
   0xFF 0x0D Compass magnetic variation
      VA = Variation as signed 8bit integer in degrees
   0xFF 0x0E Wind shift
      VA = 8bit unsigned integer

   0xE5 Backlight level
      VA = 0x00 : Off
      VA = 0x01 : Level 1
      VA = 0x02 : Level 2
      VA = 0x03 : Level 3

************************************
*** Message 0x07 (Ack Parameter) ***
************************************
Transmission window : Acknowledge

This message is sent by a slave device to acknowledge a "Set Parameter" command sent on the asynchronous window. It is
used by master device to detect collision on asynchronous window and to repeat "Set Parameter" command if required.

Example :
|83 03 77 37|83 03 77 37|07|09|09|80|13|13|
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|
|             MESSAGE HEADER              |


***************************
*** Message 0x0A (Ping) ***
***************************
Transmission window : Asynchronous

This message is used by network's master to probe devices connected to the network.
It is also used to remove from network devices which have not been detected for several ON/OFF cycles.

Example :
|             MESSAGE HEADER              |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|
|83 03 77 37|83 03 77 37|0A|09|00|7B|0C|0C|

*******************************
*** Message 0x0B (Ack Ping) ***
*******************************
Transmission window : Acknowledge

This message is used by slave devices as a response to 0x0A message from master. 
The value sent as payload is not identified. It looks like some status or property flags.

Example :

|             MESSAGE HEADER              |  ?  |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|??|CS|
|83 03 77 37|01 0B C0 22|0B|01|09|37|0E|0E|00|00|

******************************************
*** Message 0x0C (Remote Control Start) ***
******************************************
Transmission window : Asynchronous?

This message is used by the remote control device to broadcast that it is entering remote control mode. 
it is followed by a 0x14 "remote device select" to select the active controlled device.

Example :

|             MESSAGE HEADER              |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|
|88 0B 29 06|88 0B C9 44|0C|01|09|78|0C|0C|
	 
******************************************
*** Message 0x0D (Remote Control End) ***
******************************************
Transmission window : Asynchronous?

This message is used by the remote control device to broadcast that it is exiting remote control mode. 
it is followed by a 0x06 "set param" message to ?. which is then ack'd (0x07) by the controllable displays (incl .the remote itself) 

Example :

|             MESSAGE HEADER              |
|    NID    |    DID    |MI|DF|SS|CS|LE|CS|
|88 0B 29 06|88 0B C9 44|0D|01|09|79|0C|0C|

**************************************
*** Message 0x14 (Send RC Command) ***
**************************************
Transmission window : Asynchronous?

This message is used to send a remote command to a controllable display device.
It sends an RC command and the target device id.

Message example :

Send "v" button press to display device
|             MESSAGE HEADER              |    RC COMMAND   |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|RC|    DID1   |CS|
|88 0B 29 06|88 0B C9 44|14|01|09|80|12|12|05|BD 78 0B 86|CB|

RC = RC Command
     0x05 "v" button press (chapter)
     0x06 long "v" button press (on/off)
     0x09 "o" button press (set)
     0x0a long "o" button press (setup)
	 0x0d "<" button press (page left or adjust value left)
	 0x11 ">" button press (page right or adjust value right)
	 0x12 long ">" button press (backlighting)
	 0x13 long ">" button press (backlighting) -- /!\ both 12 and 13 are sent on a long ">" press
	 0x24 select upper pane on dual displays (only tested on a Maxi display)
	 0x25 select lower pane on dual displays (only tested on a Maxi display)

DID1 = target device

CS = Checksum

Note: not sure if one can send any RC command directly to a display without prior 0x0C command and/or 0x14 device select command.

********************************************************
*** Message 0x18 (Initiate Master Change?) ***
********************************************************
Transmission window : Synchronous?

This message is used to initiate a change of Master device. 
It is sent automatically by the current master to another device it selects (selection criteria unknown).

Message example :

Initiate Master change
|             MESSAGE HEADER              |     FIELD    |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|    DID1   |CS|
|88 0B 29 06|88 0B C9 44|18|01|00|7B|11|11|BD 78 0B 86|C6|

**********************************************
*** Message 0x19 (Ack Master Change?) ***
**********************************************
Transmission window : Acknowledge?

This message is the acknowledgement by the device which received the 0x19 request that it will become the new Master.

Message example :

Acknowledge Master change
|             MESSAGE HEADER              |
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|
|88 0B 29 06|86 0B 78 BD|19|19|09|C3|0C|0C|

******************************************************************
*** Message 0x1b (Ack Remote - Report control capabilities ??) ***
******************************************************************
Transmission window : Acknowledge?

This message is sent by the controlled device after it receives its first 0x14 command.
(ie for a dual display, it is not sent when selecting the bottom pane, but it will be resent again everytime the RC switches back to the device)

Message example :

Acknowledge Remote state
|             MESSAGE HEADER              |FIELD|
|    NUID   |    DID    |MI|DF|SS|CS|LE|CS|VA|CS|
|88 0B 29 06|86 0B 78 BD|1B|19|09|C5|0E|0E|02|02|

VA = number of controllable panes ??
